### add a legend
# This is where you can edit the legend size and style
dummy = ggplot(temp$data[[5]], aes(x = x, y = y, group = group, fill  = fill)) + geom_polygon() +
scale_fill_manual(name = category_legend, labels = category_names,  guide = "legend", values = category_colours)+
#guides(name = category_legend, fill = guide_legend(labels = category_names))+
theme(legend.position = "right", legend.key.size = unit(5,"line"), legend.text = element_text(size = 18))
View(category_data)
strsplit(category_data$Categories, ";")
max(strsplit(category_data$Categories, ";"))
max(unlist(strsplit(category_data$Categories, ";")))
unlist(strsplit(category_data$Categories, ";"))
max(as.numeric(unlist(strsplit(category_data$Categories, ";"))))
g = ggplotGrob(dummy)$grobs
legend <- g[[which(sapply(g, function(x) x$name) == "guide-box")]]
plot(legend)
# the layout matrix for the combined plot
lay = rbind(matrix(c(1,1,1,1,1,1,2)),c(1,1,1,1,1,1,2), c(1,1,1,1,1,1,2))
# the layout matrix for the combined plot
lay = rbind(matrix(c(1,1,1,1,1,1,NA)),c(1,1,1,1,1,1,2), c(1,1,1,1,1,1,2), c(1,1,1,1,1,1,2), c(1,1,1,1,1,1,NA))
grid.arrange(grobs = list(temp_ggtable, legend),layout_matrix = lay, heights = c(rep(2,nrow(lay)-1),1))
library(gridExtra)
grid.arrange(grobs = list(temp_ggtable, legend),layout_matrix = lay, heights = c(rep(2,nrow(lay)-1),1))
temp_ggtable
plot(temp_ggtable)
grid.arrange(grobs = list(temp_ggtable, legend),layout_matrix = lay)#, heights = c(rep(2,nrow(lay)-1),1))
grid.arrange(grobs = list(ggplotGrob(temp_ggtable), legend),layout_matrix = lay)#, heights = c(rep(2,nrow(lay)-1),1))
grid.arrange(grobs = list(temp_ggtable, legend))
lay
# the layout matrix for the combined plot
lay = cbind(matrix(c(1,1,1,1,1,1,NA)),c(1,1,1,1,1,1,2), c(1,1,1,1,1,1,2), c(1,1,1,1,1,1,2), c(1,1,1,1,1,1,NA))
lay
grid.arrange(grobs = list(temp_ggtable, legend),layout_matrix = lay)#, heights = c(rep(2,nrow(lay)-1),1))
# the layout matrix for the combined plot
lay = rbind(c(1,1,1,1,1,1,NA),c(1,1,1,1,1,1,2), c(1,1,1,1,1,1,2), c(1,1,1,1,1,1,2), c(1,1,1,1,1,1,NA))
lay
grid.arrange(grobs = list(temp_ggtable, legend),layout_matrix = lay)#, heights = c(rep(2,nrow(lay)-1),1))
# the layout matrix for the combined plot
lay = rbind(c(1,1,1,1,1,1,1,1,NA),c(1,1,1,1,1,1,1,1,2), c(1,1,1,1,1,1,1,1,2), c(1,1,1,1,1,1,1,1,2), c(1,1,1,1,1,1,1,1,NA))
grid.arrange(grobs = list(temp_ggtable, legend),layout_matrix = lay)#, heights = c(rep(2,nrow(lay)-1),1))
CAT = grid.arrange(grobs = list(temp_ggtable, legend),layout_matrix = lay)#, heights = c(rep(2,nrow(lay)-1),1))
# save plot
## if filname = NULL and marker_colour != NULL then add plot markers
save_map(map,WG_names[rw], outdir)
maindir = "C:/Users/kabaldry/OneDrive - University of Tasmania/Documents/SOOS"
filename = file.path(maindir, "data", "SOOSWG_list_09022020.csv")
outdir = file.path(maindir, "output","style1")
lookupfile = file.path(maindir, "data", "country_lookup_table.txt")
# save plot
## if filname = NULL and marker_colour != NULL then add plot markers
save_map(map,WG_names[rw], outdir)
# save plot
## if filname = NULL and marker_colour != NULL then add plot markers
save_map(CAT,"test", outdir)
save_map <- function(plot, WG_name, outdir, p_width = 35, p_height = 25.8){
p_name = file.path(outdir, gsub(" ","",paste(WG_name, "_membermap_",format(Sys.Date(), "%Y"),".png", sep = "")))
ggsave(p_name, plot =plot , width = p_width, height = p_height, units = "cm",  device = "png") # asp 1.550668
print(paste(WG_name, "map has been saved as",basename(p_name), "in output directory!"))
}
# save plot
## if filname = NULL and marker_colour != NULL then add plot markers
save_map(CAT,"test", outdir)
grid.arrange(grobs = temp_ggtable, right =  legend)
# adjust the width of the legend here for longer names
CAT = grid.arrange(grobs = list(temp_ggtable, legend),layout_matrix = lay, widths = c(8,1), padding = unit(0, units = "line"))
# adjust the width of the legend here for longer names
CAT = grid.arrange(grobs = list(temp_ggtable, legend),layout_matrix = lay, widths = c(8,1), padding = unit(0.5, units = "line"))
grid.arrange(grobs = list(temp_ggtable, legend),layout_matrix = lay, widths = c(8,1)
)
# the layout matrix for the combined plot
lay = rbind(c(1,NA),c(1,2), c(1,2), c(1,2), c(1,NA))
lay
# adjust the width of the legend here for longer names
CAT = grid.arrange(grobs = list(temp_ggtable, legend),layout_matrix = lay, widths = c(8,1), padding = unit(0.5, units = "line"))
# adjust the width of the legend here for longer names
CAT = grid.arrange(grobs = list(temp_ggtable, legend),layout_matrix = lay, widths = c(6,1), heights = c() padding = unit(0.5, units = "line"))
grid.arrange(grobs = list(temp_ggtable, legend),layout_matrix = lay, widths = c(6,1)
)
grid.arrange(grobs = temp_ggtable, right = legend)
category_values = c("A", "B", "C", "D")
i = 1
gsub(i,category_values[i],category_data$Categories)
for(i in 1:length(category_values)){
category_data$Categories = gsub(i,category_values[i],category_data$Categories)
}
category_data$Categories
# Load and save example data
maindir = "C:/Users/kabaldry/OneDrive - University of Tasmania/Documents/SOOS"
filename = file.path(maindir, "file_examples", "SOOSWG_file_22022020.csv")
outdir = file.path(maindir, "output","style1")
lookupfile = file.path(maindir, "file_examples", "country_lookup_table.txt")
inst_LT =  file.path(maindir, "file_examples", "Mapping institutes.csv")
cat_table = file.path(maindir, "file_examples", "Category_example_file.csv")
### WG data
# read the file
data = read.csv(filename, header = T,  stringsAsFactors = F)
colnames(data) = gsub("ï..","",colnames(data)) # this is a bug that can occur from excel (yay excel)
example_WG_data = data
### Country lookup table
# read the lookup file
country_LT = read.csv(lookupfile, header = T, stringsAsFactors = F,strip.white = T)
example_country_data = country_LT
### WG and institution data
example_institution_data = read.csv(inst_LT, header = T, stringsAsFactors = F,strip.white = T)
colnames(example_institution_data) = gsub("ï..","",colnames(example_institution_data)) # this is a bug that can occur from excel (yay excel)
### Country category data
example_category_data = read.csv(cat_table, header = T, stringsAsFactors = F,strip.white = T)
colnames(example_category_data) = gsub("ï..","",colnames(example_category_data)) # this is a bug that can occur from excel (yay excel)
save(example_WG_data, example_country_data, example_institution_data, example_category_data, file = "C:/Users/kabaldry/OneDrive - University of Tasmania/Documents/R_packages/mapSOOSWG/data/ExampleData.rda")
category_data$Categories
gsub(category_values[i],i,category_data$Categories)
category_values[i]
devtools::install_github("KimBaldry/mapSOOSWG")
devtools::install_github("KimBaldry/mapSOOSWG")
install.packages("devtools")
library(devtools)
devtools::install_github("KimBaldry/mapSOOSWG")
library(mapSOOSWG)
plot_WG_map(WG_name = "Test", WG_countries = c("GBR", "USA", "AUS"))
plot_WG_map(WG_name = "Test", WG_countries = c("GBR", "USA", "AUS"))
plot_WG_map(WG_name = "Test", WG_countries = c("GBR", "USA", "AUS"))
View(example_WG_data)
devtools::install_github("KimBaldry/mapSOOSWG")
library(mapSOOSWG)
plot_WG_map(WG_name = "Test", WG_countries = c("GBR", "USA", "AUS"))
example_WG_data = example_WG_data[,1:2]
WG_maps(SOOS_WG_data = example_WG_data, outdir = "./output", country_names_data = example_country_data)
traceback()
countries = lapply(example_WG_data$Countries.Represented, FUN = function(x){unlist(strsplit(x, split = "; "))})
example_WG_data = example_WG_data[1:2,]
WG_maps(SOOS_WG_data = example_WG_data, outdir = "./output", country_names_data = example_country_data)
traceback()
devtools::install_github("KimBaldry/mapSOOSWG")
library(mapSOOSWG)
WG_maps(SOOS_WG_data = example_WG_data, outdir = "./output", country_names_data = example_country_data)
traceback()
devtools::install_github("KimBaldry/mapSOOSWG")
WG_maps(SOOS_WG_data = example_WG_data, outdir = "./output", country_names_data = example_country_data)
library(mapSOOSWG)
WG_maps(SOOS_WG_data = example_WG_data, outdir = "./output", country_names_data = example_country_data)
countries = lapply(example_WG_data$Countries.Represented, FUN = function(x){unlist(strsplit(x, split = "; "))})
# unique list of countries
unique_countries = unique(unlist(countries))
# split by comma where an individual is listed with more than one country!
unique_countries = unlist(strsplit(unique_countries,split = ","))
unique_countries = trimws(unique_countries) # trim white space
unique_countries = unique(unique_countries) # make sure unique
# find countries that are not in the lookup table
missing_countries = setdiff(unique_countries, country_names_data$Country)
# change all names in countries to ISO3 codes
ISO3 = lapply(countries, function(x){country_names_data$ISO3_name[match(x, country_names_data$Country)]})
# if all of the countries are there
if(length(missing_countries) == 0){
# count participants with ISO3 codes
for(t in 1:length(ISO3)){
plot_df = list()
plot_df[[t]] = data.frame("ISO3" = ISO3[[t]])
# count number of participants and aggregate
plot_df[[t]] = plot_df[[t]] %>% group_by(ISO3) %>% mutate(count = n())
}
# and return
check = plot_df
}else{
# give information about problems
print("Error: Cannot produce plots!")
print(paste("Not all countries are in the lookupfile. Please check the following countries, which are missing in the file:",paste(missing_countries, collapse = ", ")))
check = "Failed"
}
country_names_data = example_country_data
missing_countries = setdiff(unique_countries, country_names_data$Country)
# change all names in countries to ISO3 codes
ISO3 = lapply(countries, function(x){country_names_data$ISO3_name[match(x, country_names_data$Country)]})
# if all of the countries are there
if(length(missing_countries) == 0){
# count participants with ISO3 codes
for(t in 1:length(ISO3)){
plot_df = list()
plot_df[[t]] = data.frame("ISO3" = ISO3[[t]])
# count number of participants and aggregate
plot_df[[t]] = plot_df[[t]] %>% group_by(ISO3) %>% mutate(count = n())
}
# and return
check = plot_df
}else{
# give information about problems
print("Error: Cannot produce plots!")
print(paste("Not all countries are in the lookupfile. Please check the following countries, which are missing in the file:",paste(missing_countries, collapse = ", ")))
check = "Failed"
}
check
length(ISO3)
t = 1
devtools::install_github("KimBaldry/mapSOOSWG")
library(mapSOOSWG)
library(mapSOOSWG)
WG_maps(SOOS_WG_data = example_WG_data, outdir = "./output", country_names_data = example_country_data)
devtools::install_github("KimBaldry/mapSOOSWG")
library(mapSOOSWG)
test_WG_data = example_WG_data[1:2,]
test_WG_data = example_WG_data[1:2,]
WG_maps(SOOS_WG_data = test_WG_data, outdir = "./output", country_names_data = example_country_data)
WG_maps(SOOS_WG_data = test_WG_data, outdir = "./output", country_names_data = example_country_data, add_marker = F, add_marker_dot = F)
geocode_maps(SOOS_WG_data = test_WG_data, outdir = "./output",institution_names_data = example_country_data, country_names_data = example_country_data)
geocode_maps(SOOS_WG_data = test_WG_data, outdir = "./output",institution_names_data = example_country_data, add_countries = F)
category_maps(outdir = "./output",category_data = example_category_data[1:2,], country_names_data = example_country_data)
category_maps(outdir = "./output",category_data = example_category_data[1:2,], country_names_data = example_country_data, plot_legend = F)
category_maps(outdir = "./output",category_data = example_category_data[1:2,], country_names_data = example_country_data, plot_type = "WG", plot_legend = F)
WG_maps(SOOS_WG_data = test_WG_data, outdir = "./output", country_names_data = example_country_data)
traceback()
countries = lapply(example_WG_data$Countries.Represented, FUN = function(x){unlist(strsplit(x, split = "; "))})
check = check_country_names(countries, example_country_data)
check[[rw]]
check[[1]]
View(countries)
countries[[1]]
trimws(countries[[1]][6])
trimws(countries[[1]])
devtools::install_github("KimBaldry/mapSOOSWG")
library(mapSOOSWG)
test_WG_data = example_WG_data[1:2,]
WG_maps(SOOS_WG_data = test_WG_data, outdir = "./output", country_names_data = example_country_data)
traceback()
countries = lapply(example_WG_data$Countries.Represented, FUN = function(x){unlist(strsplit(x, split = "; "))})
# check that all countries to be plotted appear in the country lookup table
check = check_country_names(countries, country_names_data)
if(any(check == "Failed")){break}
countries = check
countries = lapply(example_WG_data$Countries.Represented, FUN = function(x){unlist(strsplit(x, split = "; "))})
# check that all countries to be plotted appear in the country lookup table
check = check_country_names(countries, example_country_data)
if(any(check == "Failed")){break}
countries = check
WG_countries = check
countDF = data.frame(country = WG_countries$ISO3,
participation = rep(1, nrow(WG_countries)))
Map = joinCountryData2Map(countDF, joinCode = "ISO3",
nameJoinColumn = "country")[-which(getMap()$ADMIN=="Antarctica"),]
# Transofrm to Mercator projection
Map = spTransform(Map, "+proj=merc +lon_0=0 +k=1 +x_0=0 +y_0=0 +ellps=WGS84 +datum=WGS84 +units=m +no_defs")
map_data = tidy(Map)
# attach map data for plotting
sub_Map =Map@data[,c("ADMIN","ISO3","participation")]
colnames(sub_Map)[1] = c("id")
map_data = data.table(left_join(map_data, sub_Map))
WG_countries = check[[1]]
countDF = data.frame(country = WG_countries$ISO3,
participation = rep(1, nrow(WG_countries)))
Map = joinCountryData2Map(countDF, joinCode = "ISO3",
nameJoinColumn = "country")[-which(getMap()$ADMIN=="Antarctica"),]
# Transofrm to Mercator projection
Map = spTransform(Map, "+proj=merc +lon_0=0 +k=1 +x_0=0 +y_0=0 +ellps=WGS84 +datum=WGS84 +units=m +no_defs")
map_data = tidy(Map)
# attach map data for plotting
sub_Map =Map@data[,c("ADMIN","ISO3","participation")]
colnames(sub_Map)[1] = c("id")
map_data = data.table(left_join(map_data, sub_Map))
wmap <- getMap(resolution="less islands")[-which(getMap()$ADMIN=="Antarctica"),]
wmap = spTransform(wmap, "+proj=merc +lon_0=0 +k=1 +x_0=0 +y_0=0 +ellps=WGS84 +datum=WGS84 +units=m +no_defs")
# get centroids
centroids = gCentroid(wmap, byid=TRUE)
centroids_df = as.data.frame(centroids)
centroids_df = centroids_df[match(sub_Map$id[which(sub_Map$participation == 1)], rownames(centroids_df)),]
sub_Map$id
countDF = data.frame(country = WG_countries$ISO3,
participation = rep(1, nrow(WG_countries)))
Map = joinCountryData2Map(countDF, joinCode = "ISO3",
nameJoinColumn = "country")[-which(getMap()$ADMIN=="Antarctica"),]
# Transofrm to Mercator projection
Map = spTransform(Map, "+proj=merc +lon_0=0 +k=1 +x_0=0 +y_0=0 +ellps=WGS84 +datum=WGS84 +units=m +no_defs")
map_data = tidy(Map)
# attach map data for plotting
sub_Map =Map@data[,c("ADMIN","ISO3","participation")]
colnames(sub_Map)[1] = c("id")
map_data = data.table(left_join(map_data, sub_Map))
### Calculate centroids
# Create a data from for the centroids of countries. This will allow up to put pins at locations
wmap <- getMap(resolution="less islands")[-which(getMap()$ADMIN=="Antarctica"),]
wmap = spTransform(wmap, "+proj=merc +lon_0=0 +k=1 +x_0=0 +y_0=0 +ellps=WGS84 +datum=WGS84 +units=m +no_defs")
# get centroids
centroids = gCentroid(wmap, byid=TRUE)
centroids_df = as.data.frame(centroids)
countDF = data.frame(country = WG_countries$ISO3,
participation = rep(1, nrow(WG_countries)))
Map = joinCountryData2Map(countDF, joinCode = "ISO3",
nameJoinColumn = "country")[-which(getMap()$ADMIN=="Antarctica"),]
# Transofrm to Mercator projection
Map = spTransform(Map, "+proj=merc +lon_0=0 +k=1 +x_0=0 +y_0=0 +ellps=WGS84 +datum=WGS84 +units=m +no_defs")
map_data = tidy(Map)
# attach map data for plotting
sub_Map =Map@data[,c("ADMIN","ISO3","participation")]
colnames(sub_Map)[1] = c("id")
map_data = data.table(left_join(map_data, sub_Map))
plot(sub_Map)
plot(Map)
range(sub_Map$participation)
range(sub_Map$participation, na.rm = T)
WG_countries$ISO3
View(countries)
WG_countries
example_WG_data[1:2,]
countries = lapply(example_WG_data$Countries.Represented, FUN = function(x){unlist(strsplit(x, split = "; "))})
View(countries)
unique_countries = unique(unlist(countries))
# split by comma where an individual is listed with more than one country!
unique_countries = unlist(strsplit(unique_countries,split = ","))
unique_countries = trimws(unique_countries) # trim white space
unique_countries = unique(unique_countries) # make sure unique
missing_countries = setdiff(unique_countries, country_names_data$Country)
missing_countries = setdiff(unique_countries, example_country_data$Country)
ISO3 = lapply(trimws(countries), function(x){country_names_data$ISO3_name[match(x, country_names_data$Country)]})
ISO3 = lapply(trimws(countries), function(x){country_names_data$ISO3_name[match(x, example_country_data$Country)]})
ISO3 = lapply(trimws(countries), function(x){example_country_data$ISO3_name[match(x, example_country_data$Country)]})
View(ISO3)
trimws(countries)
countries_ed = gsub("United States ", "United States", countries)
countries_ed = countries
for(e in length(countries)){
countries_ed[[e]] = gsub("United States ", "United States", countries)
}
countries_ed = countries
for(e in length(countries)){
countries_ed[[e]] = gsub("United States ", "United States", countries_ed[[e]])
}
help(gsub)
for(e in 1:length(countries)){
countries_ed[[e]] = gsub("United States ", "United States", countries_ed[[e]])
}
ISO3 = lapply(countries_ed, function(x){country_names_data$ISO3_name[match(x, country_names_data$Country)]})
ISO3 = lapply(countries_ed, function(x){example_country_data$ISO3_name[match(x, example_country_data$Country)]})
ISO3[[1]]
countries[[1]]
countries[[1]][which(is.na(ISO3[[1]]))]
countries_ed = countries
for(e in 1:length(countries)){
countries_ed[[e]] = strsplit(countries_ed[[e]],split = ",")
countries_ed[[e]] = trimws(countries_ed[[e]])
#countries_ed[[e]] = gsub("United States ", "United States", countries_ed[[e]])
}
countries_ed[[1]]
countries_ed = countries
for(e in 1:length(countries)){
countries_ed[[e]] = strsplit(unlist(countries_ed[[e]]),split = ",")
countries_ed[[e]] = trimws(countries_ed[[e]])
#countries_ed[[e]] = gsub("United States ", "United States", countries_ed[[e]])
}
countries_ed[[1]]
countries_ed = countries
for(e in 1:length(countries)){
countries_ed[[e]] = unlist(strsplit(unlist(countries_ed[[e]]),split = ","))
countries_ed[[e]] = trimws(countries_ed[[e]])
#countries_ed[[e]] = gsub("United States ", "United States", countries_ed[[e]])
}
countries_ed[[1]]
ISO3 = lapply(countries_ed, function(x){country_names_data$ISO3_name[match(x, country_names_data$Country)]})
ISO3 = lapply(countries_ed, function(x){example_country_data$ISO3_name[match(x, example_country_data$Country)]})
ISO3[[1]]
devtools::install_github("KimBaldry/mapSOOSWG")
test_WG_data = example_WG_data[1:2,]
library(mapSOOSWG)
test_WG_data = example_WG_data[1:2,]
WG_maps(SOOS_WG_data = test_WG_data, outdir = "./output", country_names_data = example_country_data)
WG_maps(SOOS_WG_data = test_WG_data, outdir = "./output", country_names_data = example_country_data, add_marker = F, add_marker_dot = F)
geocode_maps(SOOS_WG_data = test_WG_data, outdir = "./output",institution_names_data = example_country_data, country_names_data = example_country_data)
traceback()
devtools::install_github("KimBaldry/mapSOOSWG")
library(mapSOOSWG)
test_WG_data = example_WG_data[1:2,]
geocode_maps(SOOS_WG_data = test_WG_data, outdir = "./output",institution_names_data = example_country_data, country_names_data = example_country_data)
inst = lapply(example_WG_data$Affiliations, FUN = function(x){unlist(strsplit(x, split = "; "))})
plot_df = list()
inst_clean = list()
t = 1
institution_names_data = example_institution_data
for(x in institution_names_data$Name){
# test that the institution name from the lookup table appears
test = grepl(x, institutions[[t]], fixed = T)
if(any(test)){
# if the name appears, add a semi colon after the name
idx = which(test)
for(i in idx){
institutions[[t]][i] = gsub("\"","", institutions[[t]][i],fixed = T)
institutions[[t]][i] = gsub(x,paste(x, ";", sep = ""), institutions[[t]][i],fixed = T)
}
}
}
institutions = inst
for(x in institution_names_data$Name){
# test that the institution name from the lookup table appears
test = grepl(x, institutions[[t]], fixed = T)
if(any(test)){
# if the name appears, add a semi colon after the name
idx = which(test)
for(i in idx){
institutions[[t]][i] = gsub("\"","", institutions[[t]][i],fixed = T)
institutions[[t]][i] = gsub(x,paste(x, ";", sep = ""), institutions[[t]][i],fixed = T)
}
}
}
View(institutions)
for(i in 1:length(institutions[[t]])){
if(i == 1){inst_clean[[t]] = trimws(gsub(";","",unlist(strsplit(institutions[[t]][[i]],split = ";,"))))}else{
inst_clean[[t]] = c(inst_clean[[t]], trimws(gsub(";","",unlist(strsplit(institutions[[t]][[i]],split = ";,")))))}
}
inst_clean
# create a data frame for each WG with latitudes and longitude
plot_df[[t]] = data.frame("inst" = inst_clean[[t]], "lat" = as.numeric(institution_names_data$Latitude[match(inst_clean[[t]], institution_names_data$Name)]), "lon" =  as.numeric(institution_names_data$Longitude[match(inst_clean[[t]], institution_names_data$Name)]))
View(plot_df)
#' @title Check and get geocodes of institutions
#'
#' @author Kimberlee Baldry
#' @description This function simply checks SOOS institution data against the available geocode table. If the test is passed, it then retrieves lat, lon coordinates for SOOS institution names as a data frame. If the test is failed, a "Failed" message is returned.
#'
#' @note v.0.1
#'
#' @return If check failed returns "Failed". If check sucessfull returns institution,lat,lon and a participation count as a dataframe
#' @param institutions list of institution character vercors to be checked from the data file
#' @param institution_names_data A data frame. The data frame must contain 4 columns labeled "Name" (what SOOS records the Affiliations as), "Type", "Latitude" and "Longitude". SSee example_institution_data for an example.#'
#'
#' @import ggplot2
#' @import data.table
#' @import broom
#' @import rgeos
#' @import rworldmap
#' @import ggimage
#' @import tidyverse
#'
#' @export
check_institution_names <- function(institutions, institution_names_data){
### add semicolon to separate institutions
plot_df = list()
inst_clean = list()
for(t in 1:length(institutions)){
for(x in institution_names_data$Name){
# test that the institution name from the lookup table appears
test = grepl(x, institutions[[t]], fixed = T)
if(any(test)){
# if the name appears, add a semi colon after the name
idx = which(test)
for(i in idx){
institutions[[t]][i] = gsub("\"","", institutions[[t]][i],fixed = T)
institutions[[t]][i] = gsub(x,paste(x, ";", sep = ""), institutions[[t]][i],fixed = T)
}
}
}
# loop through the listed institutions for a working group and "clean" the names by splitting with the new ";," delimiter
for(i in 1:length(institutions[[t]])){
if(i == 1){inst_clean[[t]] = trimws(gsub(";","",unlist(strsplit(institutions[[t]][[i]],split = ";,"))))}else{
inst_clean[[t]] = c(inst_clean[[t]], trimws(gsub(";","",unlist(strsplit(institutions[[t]][[i]],split = ";,")))))}
}
# create a data frame for each WG with latitudes and longitude
plot_df[[t]] = data.frame("inst" = inst_clean[[t]], "lat" = as.numeric(institution_names_data$Latitude[match(inst_clean[[t]], institution_names_data$Name)]), "lon" =  as.numeric(institution_names_data$Longitude[match(inst_clean[[t]], institution_names_data$Name)]))
# count number of participants and aggregate
plot_df[[t]] = plot_df[[t]] %>% group_by(inst, lat, lon) %>% mutate(count = n())
# replace institution list
institutions[[t]] = plot_df[[t]]$inst
# identify entries with no coordinates FYI
if(t == 1){no_coord = as.character(plot_df[[t]]$inst[which(is.na(plot_df[[t]]$lat))])}else{
no_coord = c(no_coord, as.character(plot_df[[t]]$inst[which(is.na(plot_df[[t]]$lat))]))}
plot_df[[t]] = plot_df[[t]] %>% filter(is.finite(lat))
}
# unique list of institutions
unique_institutions = unique(unlist(institutions))
# find institutions that are not in the lookup table
missing_institutions = setdiff(unique_institutions, institution_names_data$Name)
# if all of the institutions are there
if(length(missing_institutions) == 0){
# return the data frame to plot markers
if(length(no_coord) > 0){print(paste("Warning! The following institutions have no coordinates. They have been removed:", paste(unique(no_coord) , collapse = ","), sep = " "))}
check = plot_df
}else{
# if not, give information about problems
print("Error: Cannot produce plots!")
print(paste("Not all institutions are in the geocode file. Please check the following institutions, which are missing in the file:",paste(missing_institutions, collapse = ", ")))
check = "Failed"
}
return(check)
}
geocode_maps(SOOS_WG_data = test_WG_data, outdir = "./output",institution_names_data = example_institution_data, country_names_data = example_country_data)
category_maps(outdir = "./output",category_data = example_category_data[1:2,], country_names_data = example_country_data)
devtools::install_github("KimBaldry/mapSOOSWG")
library(mapSOOSWG)
geocode_maps(SOOS_WG_data = test_WG_data, outdir = "./output",institution_names_data = example_institution_data, country_names_data = example_country_data)
test_WG_data = example_WG_data[1:2,]
geocode_maps(SOOS_WG_data = test_WG_data, outdir = "./output",institution_names_data = example_institution_data, country_names_data = example_country_data)
category_maps(outdir = "./output",category_data = example_category_data[1:2,], country_names_data = example_country_data)
library(gridExtra)
help("grid.arrange")
devtools::install_github("KimBaldry/mapSOOSWG")
library(mapSOOSWG)
category_maps(outdir = "./output",category_data = example_category_data[1:2,], country_names_data = example_country_data)
example_category_data[1:2,]
category_maps(outdir = "./output",category_data = example_category_data[1:2,], country_names_data = example_country_data, plot_type = "geocode", institution_names_data = example_institution_data, plot_legend = F)
traceback()
category_maps(SOOS_WG_data = test_WG_data,outdir = "./output",category_data = example_category_data[1:2,], country_names_data = example_country_data, plot_type = "geocode", institution_names_data = example_institution_data, plot_legend = F)
test_WG_data = example_WG_data[1:2,]
category_maps(SOOS_WG_data = test_WG_data,outdir = "./output",category_data = example_category_data[1:2,], country_names_data = example_country_data, plot_type = "geocode", institution_names_data = example_institution_data, plot_legend = F)
category_maps(outdir = "./output",category_data = example_category_data[1:2,], country_names_data = example_country_data, plot_type = "WG", plot_legend = F)
example_category_data[1:2,]
category_maps(SOOS_WG_data = test_WG_data,outdir = "./output",category_data = example_category_data[1:2,], country_names_data = example_country_data, plot_type = "geocode", institution_names_data = example_institution_data, plot_legend = F)
traceback()
devtools::install_github("KimBaldry/mapSOOSWG")
test_WG_data = example_WG_data[1:2,]
library(mapSOOSWG)
test_WG_data = example_WG_data[1:2,]
category_maps(SOOS_WG_data = test_WG_data,outdir = "./output",category_data = example_category_data[1:2,], country_names_data = example_country_data, plot_type = "geocode", institution_names_data = example_institution_data, plot_legend = F)
traceback()
category_maps(outdir = "./output",category_data = example_category_data[1:2,], country_names_data = example_country_data, plot_type = "geocode", institution_names_data = example_institution_data, category_names = c("A","B","C","D"), category_legend = "Grade")
category_maps(outdir = "./output",category_data = example_category_data[1:2,], country_names_data = example_country_data, plot_type = "geocode", institution_names_data = example_institution_data, category_names = c("A","B","C","D"))
category_maps(SOOS_WG_data = test_WG_data, outdir = "./output",category_data = example_category_data[1:2,], country_names_data = example_country_data, plot_type = "geocode", institution_names_data = example_institution_data, plot_legend = F)
category_maps(SOOS_WG_data = test_WG_data, outdir = "./output",category_data = example_category_data[1:2,], country_names_data = example_country_data, plot_type = "geocode", institution_names_data = example_institution_data, category_names = c("A","B","C","D"))
category_maps(SOOS_WG_data = test_WG_data, outdir = "./output",category_data = example_category_data[1:2,], country_names_data = example_country_data, plot_type = "geocode", institution_names_data = example_institution_data, category_names = c("A","B","C","D"), category_legend = "Grade")
WG_maps(SOOS_WG_data = test_WG_data, outdir = "./output", country_names_data = example_country_data, marker_colour = "red")
WG_maps(SOOS_WG_data = test_WG_data, outdir = "./output", country_names_data = example_country_data,  marker_png = "./data/marker7.png")
