baseCAT
baseCAT guides(fill = guide_legend())
baseCAT + guides(fill = guide_legend())
baseCAT + guides(fill = guide_legend()) + theme(legend.position = "right")
category_names = NULL
baseCAT + guides(fill = guide_legend(labels = category_names)) + theme(legend.position = "right")
baseCAT + guides(name = NULL,fill = guide_legend(labels = category_names)) + theme(legend.position = "right")
baseCAT + guides(name = NA,fill = guide_legend(labels = category_names)) + theme(legend.position = "right")
baseCAT = plot_WG_map(WG_names[rw], countries[[rw]])
baseCAT = plot_WG_map(WG_names[rw], cat_countries[[rw]])
baseCAT
temp = ggplot_build(baseCAT)
View(temp)
plot(temp$data[[1]])
plot(temp$data[[2]])
plot(temp$data[[3]])
plot(temp$data[[3]])
plot(temp$data[[4]])
plot(temp$data[[5]])
A = temp$data[[5]]
B = temp$data[[3]]
B = temp$data[[7]]
B = temp$data[[6]]
View(A)
baseCAT = base_plot() +
# plot SOOS WG countries ###### edit for multiple colours
geom_polygon(data =count_data[participation == 1], aes(x = long, y = lat, group = group, fill = cat, ISO3 = ISO3), colour = country_border_colour, lwd = country_border_lwd)
baseCAT = base_plot() +
# plot SOOS WG countries ###### edit for multiple colours
geom_polygon(data =count_data[participation == 1], aes(x = long, y = lat, group = group, fill = cat, ISO3 = ISO3))
baseCAT
A = ggplot_build(baseCAT)
head(A$data[[5]])
A= temp$data[[5]]
baseCAT = plot_WG_map(plot_WG_map(WG_names[rw], cat_countries[[rw]], add_marker = F, add_marker_dot = F))
WG_names[rw]
### Load category information
# note all variables starting with "cat" relate to the category data
WG_names = category_data$Acronym
baseCAT = plot_WG_map(cat_WG_names[rw], cat_countries[[rw]], add_marker = F, add_marker_dot = F)
# adjust fill
temp = ggplot_build(baseCAT)
A = temp$data[[5]]
head(example_institution_data)
devtools::install_github("KimBaldry/mapSOOSWG")
library(mapSOOSWG)
# just remove existing markers (if any) and add new colours
country_categories <- function(cat_data_orig, cat_countries_ISO3){
### Prepare data for ggplot
df = data.frame(country = cat_countries_ISO3,
participation = rep(1, length(cat_countries_ISO3)))
count = joinCountryData2Map(df, joinCode = "ISO3",
nameJoinColumn = "country")[-which(getMap()$ADMIN=="Antarctica"),]
# Transofrm to Mercator projection
count = spTransform(count, "+proj=merc +lon_0=0 +k=1 +x_0=0 +y_0=0 +ellps=WGS84 +datum=WGS84 +units=m +no_defs")
count_data = tidy(count)
# attach map data for plotting
sub_count =count@data[,c("ADMIN","ISO3","participation")]
colnames(sub_count)[1] = c("id")
count_data = data.table(left_join(count_data, sub_count))
### add category information
cat_df = str_split(cat_data_orig[rw,(2:3)], ";")
cat_df = data.frame("ISO3" = cat_countries_ISO3, "cat" = as.numeric(cat_df[[2]]))
n = length(unique(cat_df$cat))
# order low-high so plots highest on top
cat_df = cat_df[order(cat_df$cat),]
cat_df = cat_df[!duplicated(cat_df$ISO3),]
count_data = data.table(left_join(count_data, cat_df), by = "ISO3")
count_data$fill = category_colours[match(count_data$cat,1:length(category_colours))]
count_data$cat = factor(count_data$cat, levels = c(1:range(cat_df$cat)[2]))
return(count_data)
}
library(mapSOOSWG)
SOOS_WG_data = example_WG_data
category_data = example_category_data
country_names_daya = example_country_data
institution_names_data = example_institution_data
### Load category information
# note all variables starting with "cat" relate to the category data
cat_WG_names = category_data$Acronym
cat_countries = lapply(category_data$Countries, FUN = function(x){unlist(strsplit(x, split = "; "))})
categories = lapply(category_data$Categories, FUN = function(x){unlist(strsplit(x, split = "; "))})
check = check_country_names(cat_countries, country_names_data)
if(any(check == "Failed")){break}
cat_countries = check
country_names_data = example_country_data
### Load category information
# note all variables starting with "cat" relate to the category data
cat_WG_names = category_data$Acronym
cat_countries = lapply(category_data$Countries, FUN = function(x){unlist(strsplit(x, split = "; "))})
categories = lapply(category_data$Categories, FUN = function(x){unlist(strsplit(x, split = "; "))})
check = check_country_names(cat_countries, country_names_data)
if(any(check == "Failed")){break}
cat_countries = check
rw = 1
cat_df = country_categories(category_data, cat_countries[[rw]])
category_colours = SOOScol
category_names = NULL
category_legend = NULL
cat_df = country_categories(category_data, cat_countries[[rw]])
baseCAT = plot_WG_map(cat_WG_names[rw], cat_countries[[rw]], add_marker = F, add_marker_dot = F)
baseCAT
# adjust fill
temp = ggplot_build(baseCAT)
head(temp$data[[5]] )
# just remove existing markers (if any) and add new colours
country_categories <- function(cat_data_orig, cat_countries_ISO3){
# ### Prepare data for ggplot
# df = data.frame(country = cat_countries_ISO3,
#                 participation = rep(1, length(cat_countries_ISO3)))
# count = joinCountryData2Map(df, joinCode = "ISO3",
#                             nameJoinColumn = "country")[-which(getMap()$ADMIN=="Antarctica"),]
#
# # Transofrm to Mercator projection
# count = spTransform(count, "+proj=merc +lon_0=0 +k=1 +x_0=0 +y_0=0 +ellps=WGS84 +datum=WGS84 +units=m +no_defs")
# count_data = tidy(count)
# # attach map data for plotting
# sub_count =count@data[,c("ADMIN","ISO3","participation")]
# colnames(sub_count)[1] = c("id")
# count_data = data.table(left_join(count_data, sub_count))
### add category information
cat_df = str_split(cat_data_orig[rw,(2:3)], ";")
cat_df = data.frame("ISO3" = cat_countries_ISO3, "cat" = as.numeric(cat_df[[2]]))
n = length(unique(cat_df$cat))
# order low-high so plots highest on top
cat_df = cat_df[order(cat_df$cat),]
cat_df = cat_df[!duplicated(cat_df$ISO3),]
cat_data$fill = category_colours[match(cat_data$cat,1:length(category_colours))]
# count_data = data.table(left_join(count_data, cat_df), by = "ISO3")
# count_data$fill = category_colours[match(count_data$cat,1:length(category_colours))]
# count_data$cat = factor(count_data$cat, levels = c(1:range(cat_df$cat)[2]))
return(cat_data)
}
cat_df = country_categories(category_data, cat_countries[[rw]])
# just remove existing markers (if any) and add new colours
country_categories <- function(cat_data_orig, cat_countries_ISO3){
# ### Prepare data for ggplot
# df = data.frame(country = cat_countries_ISO3,
#                 participation = rep(1, length(cat_countries_ISO3)))
# count = joinCountryData2Map(df, joinCode = "ISO3",
#                             nameJoinColumn = "country")[-which(getMap()$ADMIN=="Antarctica"),]
#
# # Transofrm to Mercator projection
# count = spTransform(count, "+proj=merc +lon_0=0 +k=1 +x_0=0 +y_0=0 +ellps=WGS84 +datum=WGS84 +units=m +no_defs")
# count_data = tidy(count)
# # attach map data for plotting
# sub_count =count@data[,c("ADMIN","ISO3","participation")]
# colnames(sub_count)[1] = c("id")
# count_data = data.table(left_join(count_data, sub_count))
### add category information
cat_df = str_split(cat_data_orig[rw,(2:3)], ";")
cat_df = data.frame("ISO3" = cat_countries_ISO3, "cat" = as.numeric(cat_df[[2]]))
n = length(unique(cat_df$cat))
# order low-high so plots highest on top
cat_df = cat_df[order(cat_df$cat),]
cat_df = cat_df[!duplicated(cat_df$ISO3),]
cat_df$fill = category_colours[match(cat_df$cat,1:length(category_colours))]
# count_data = data.table(left_join(count_data, cat_df), by = "ISO3")
# count_data$fill = category_colours[match(count_data$cat,1:length(category_colours))]
# count_data$cat = factor(count_data$cat, levels = c(1:range(cat_df$cat)[2]))
return(cat_data)
}
cat_df = country_categories(category_data, cat_countries[[rw]])
# just remove existing markers (if any) and add new colours
country_categories <- function(cat_data_orig, cat_countries_ISO3){
# ### Prepare data for ggplot
# df = data.frame(country = cat_countries_ISO3,
#                 participation = rep(1, length(cat_countries_ISO3)))
# count = joinCountryData2Map(df, joinCode = "ISO3",
#                             nameJoinColumn = "country")[-which(getMap()$ADMIN=="Antarctica"),]
#
# # Transofrm to Mercator projection
# count = spTransform(count, "+proj=merc +lon_0=0 +k=1 +x_0=0 +y_0=0 +ellps=WGS84 +datum=WGS84 +units=m +no_defs")
# count_data = tidy(count)
# # attach map data for plotting
# sub_count =count@data[,c("ADMIN","ISO3","participation")]
# colnames(sub_count)[1] = c("id")
# count_data = data.table(left_join(count_data, sub_count))
### add category information
cat_df = str_split(cat_data_orig[rw,(2:3)], ";")
cat_df = data.frame("ISO3" = cat_countries_ISO3, "cat" = as.numeric(cat_df[[2]]))
n = length(unique(cat_df$cat))
# order low-high so plots highest on top
cat_df = cat_df[order(cat_df$cat),]
cat_df = cat_df[!duplicated(cat_df$ISO3),]
cat_df$fill = category_colours[match(cat_df$cat,1:length(category_colours))]
# count_data = data.table(left_join(count_data, cat_df), by = "ISO3")
# count_data$fill = category_colours[match(count_data$cat,1:length(category_colours))]
# count_data$cat = factor(count_data$cat, levels = c(1:range(cat_df$cat)[2]))
return(cat_df)
}
cat_df = country_categories(category_data, cat_countries[[rw]])
match(temp$data[[5]]$ISO3,cat_df$ISO3)
temp$data[[5]]$fill = cat_df$fill[match(temp$data[[5]]$ISO3,cat_df$ISO3)]
ggplot_gtable(temp)
plot(ggplot_gtable(temp))
baseCAT = baseCAT+ scale_fill_manual(values = category_colours) +
guides(name = name = category_legend, fill = guide_legend(labels = category_names)) + theme(legend.position = "right")
baseCAT = baseCAT+ scale_fill_manual(values = category_colours) +
guides(name =  category_legend, fill = guide_legend(labels = category_names)) + theme(legend.position = "right")
# adjust fill
temp = ggplot_build(baseCAT)
temp$data[[5]]$fill = cat_df$fill[match(temp$data[[5]]$ISO3,cat_df$ISO3)]
ggplot_gtable(temp)
temp_ggtable = ggplot_gtable(temp)
plot(temp_ggtable)
baseCAT
baseCAT = plot_WG_map(cat_WG_names[rw], cat_countries[[rw]], add_marker = F, add_marker_dot = F)
baseCAT = baseCAT+ scale_fill_manual(values = category_colours) +
guides(name =  category_legend, fill = guide_legend(labels = category_names)) + theme(legend.position = "right")
baseCAT = baseCAT+
scale_fill_identity(name = category_legend, labels = category_names,  guide = "legend", breaks = category_colours)
baseCAT
# make plot object
if(plot_type == "WG"){baseCAT = plot_WG_map(WG_names[rw], cat_countries[[rw]])
}
plot_WG_map(cat_WG_names[rw], cat_countries[[rw]], add_marker = F, add_marker_dot = F)
baseCAT = baseCAT+
scale_fill_identity(name = category_legend, labels = category_names,  guide = "legend", breaks = category_colours)+
theme(legend.position = "right")
baseCAT
baseCAT = baseCAT +
scale_fill_identity(name = category_legend, labels = category_names,  guide = "legend", breaks = category_colours)+
guides(name = name = category_legend, fill = guide_legend(labels = category_names))+
theme(legend.position = "right")
baseCAT = plot_WG_map(cat_WG_names[rw], cat_countries[[rw]], add_marker = F, add_marker_dot = F)
baseCAT = baseCAT +
scale_fill_identity(name = category_legend, labels = category_names,  guide = "legend", breaks = category_colours)+
guides(name = category_legend, fill = guide_legend(labels = category_names))+
theme(legend.position = "right")
baseCAT
# adjust fill
temp = ggplot_build(baseCAT)
temp$data[[5]]$fill = cat_df$fill[match(temp$data[[5]]$ISO3,cat_df$ISO3)]
temp_ggtable = ggplot_gtable(temp)
plot(temp_ggtable)
## add a legend
dummy = ggplot() + scale_fill_identity(name = category_legend, labels = category_names,  guide = "legend", breaks = category_colours)+
guides(name = category_legend, fill = guide_legend(labels = category_names))+
theme(legend.position = "right")
dummy
## add a legend
dummy = ggplot() + #scale_fill_identity(name = category_legend, labels = category_names,  guide = "legend", breaks = category_colours)+
guides(name = category_legend, fill = guide_legend(labels = category_names))+
theme(legend.position = "right")
dummy
dummy = ggplot() + #scale_fill_identity(name = category_legend, labels = category_names,  guide = "legend", breaks = category_colours)+
guides(name = category_legend, fill = guide_legend(labels = category_names))
## add a legend
dummy = ggplot(temp$data[[5]], aes()) + scale_fill_manual(name = category_legend, labels = category_names,  guide = "legend", breaks = category_colours)+
guides(name = category_legend, fill = guide_legend(labels = category_names))+
theme(legend.position = "right")
dummy
# make plot object
if(plot_type == "WG"){baseCAT = plot_WG_map(WG_names[rw], cat_countries[[rw]])
}
baseCAT = plot_WG_map(WG_names[rw], cat_countries[[rw]])
baseCAT = baseCAT +
scale_fill_manual(name = category_legend, labels = category_names,  guide = "legend", breaks = category_colours)+
guides(name = category_legend, fill = guide_legend(labels = category_names))+
theme(legend.position = "right")
baseCAT
## add a legend
dummy = ggplot(temp$data[[5]], aes(x = long, y = lat, group = group, ISO3 = ISO3)) + geom_polygon()+ scale_fill_manual(name = category_legend, labels = category_names,  guide = "legend", breaks = category_colours)+
guides(name = category_legend, fill = guide_legend(labels = category_names))+
theme(legend.position = "right")
dummy
head(temp$data[[5]])
## add a legend
dummy = ggplot(temp$data[[5]], aes(x = x, y = y, group = group, ISO3 = ISO3)) + geom_polygon()+ scale_fill_manual(name = category_legend, labels = category_names,  guide = "legend", breaks = category_colours)+
guides(name = category_legend, fill = guide_legend(labels = category_names))+
theme(legend.position = "right")
dummy
## add a legend
dummy = ggplot(temp$data[[5]], aes(x = x, y = y, group = group, fill =  = ISO3)) + geom_polygon()+ scale_fill_manual(name = category_legend, labels = category_names,  guide = "legend", breaks = category_colours)+
guides(name = category_legend, fill = guide_legend(labels = category_names))+
theme(legend.position = "right")
## add a legend
dummy = ggplot(temp$data[[5]], aes(x = x, y = y, group = group, fill  = ISO3)) + geom_polygon()+ scale_fill_manual(name = category_legend, labels = category_names,  guide = "legend", breaks = category_colours)+
guides(name = category_legend, fill = guide_legend(labels = category_names))+
theme(legend.position = "right")
dummy
## add a legend
dummy = ggplot(temp$data[[5]], aes(x = x, y = y, group = group, fill  = fill)) + geom_polygon()+ scale_fill_manual(name = category_legend, labels = category_names,  guide = "legend", breaks = category_colours)+
guides(name = category_legend, fill = guide_legend(labels = category_names))+
theme(legend.position = "right")
dummy
category_colours
category_names
n
range(cat_df$cat)
seq(range(cat_df$cat))
seq(range(cat_df$cat)[1], range(cat_df$cat)[2])
if(is.null(category_names)){category_names =  seq(range(cat_df$cat)[1], range(cat_df$cat)[2])}
## add a legend
dummy = ggplot(temp$data[[5]], aes(x = x, y = y, group = group, fill  = fill)) + geom_polygon() +
scale_fill_manual(name = category_legend, labels = category_names,  guide = "legend", breaks = category_colours)+
guides(name = category_legend, fill = guide_legend(labels = category_names))+
theme(legend.position = "right")
category_data
cat_countries[[rw]]
cat_df$cat
category_colours = category_colours[1:diff(range(cat_df$cat))]
category_colours = category_colours[1:(diff(range(cat_df$cat))+1)]
category_colours = SOOScol
category_colours = category_colours[1:(diff(range(cat_df$cat))+1)]
uniqu(cat_df$fill)
unique(cat_df$fill)
baseCAT = plot_WG_map(cat_WG_names[rw], cat_countries[[rw]], add_marker = F, add_marker_dot = F)
# adjust fill
temp = ggplot_build(baseCAT)
temp$data[[5]]$fill = cat_df$fill[match(temp$data[[5]]$ISO3,cat_df$ISO3)]
temp_ggtable = ggplot_gtable(temp)
if(is.null(category_names)){category_names =  seq(range(cat_df$cat)[1], range(cat_df$cat)[2])}
## add a legend
dummy = ggplot(temp$data[[5]], aes(x = x, y = y, group = group, fill  = fill)) + geom_polygon() +
scale_fill_manual(name = category_legend, labels = category_names,  guide = "legend", breaks = category_colours)+
guides(name = category_legend, fill = guide_legend(labels = category_names))+
theme(legend.position = "right")
dummy
category_legend
category_names
category_colours
## add a legend
dummy = ggplot(temp$data[[5]], aes(x = x, y = y, group = group, fill  = fill)) + geom_polygon() +
scale_fill_manual(name = category_legend, labels = category_names,  guide = "legend", breaks = category_colours)+
#guides(name = category_legend, fill = guide_legend(labels = category_names))+
theme(legend.position = "right")
dummy
## add a legend
dummy = ggplot(temp$data[[5]], aes(x = x, y = y, group = group, fill  = fill)) + geom_polygon() +
scale_fill_manual( labels = category_names,  guide = "legend", breaks = category_colours)+
#guides(name = category_legend, fill = guide_legend(labels = category_names))+
theme(legend.position = "right")
dummy
## add a legend
dummy = ggplot(temp$data[[5]], aes(x = x, y = y, group = group, fill  = fill)) + geom_polygon() +
scale_fill_manual( labels = category_names,  guide = "legend", values = category_colours)+
#guides(name = category_legend, fill = guide_legend(labels = category_names))+
theme(legend.position = "right")
dummy
## add a legend
dummy = ggplot(temp$data[[5]], aes(x = x, y = y, group = group, fill  = fill)) + geom_polygon() +
scale_fill_manual(name = category_legend, labels = category_names,  guide = "legend", values = category_colours)+
#guides(name = category_legend, fill = guide_legend(labels = category_names))+
theme(legend.position = "right")
dummy
## add a legend
dummy = ggplot(temp$data[[5]], aes(x = x, y = y, group = group, fill  = fill)) + geom_polygon() +
scale_fill_manual(name = category_legend, labels = category_names,  guide = "legend", values = category_colours)+
#guides(name = category_legend, fill = guide_legend(labels = category_names))+
theme(legend.position = "right", legend.key.size = 5)
dummy
## add a legend
dummy = ggplot(temp$data[[5]], aes(x = x, y = y, group = group, fill  = fill)) + geom_polygon() +
scale_fill_manual(name = category_legend, labels = category_names,  guide = "legend", values = category_colours)+
#guides(name = category_legend, fill = guide_legend(labels = category_names))+
theme(legend.position = "right", legend.key.size = unit(5))
baseCAT = baseCAT +
scale_fill_manual(name = category_legend, labels = category_names,  guide = "legend", breaks = category_colours)+
guides(name = category_legend, fill = guide_legend(labels = category_names))+
theme(legend.position = "right", legend.key.width = unit(5,"line"))
## add a legend
dummy = ggplot(temp$data[[5]], aes(x = x, y = y, group = group, fill  = fill)) + geom_polygon() +
scale_fill_manual(name = category_legend, labels = category_names,  guide = "legend", values = category_colours)+
#guides(name = category_legend, fill = guide_legend(labels = category_names))+
theme(legend.position = "right", legend.key.width = unit(5,"line"))
dummy
## add a legend
dummy = ggplot(temp$data[[5]], aes(x = x, y = y, group = group, fill  = fill)) + geom_polygon() +
scale_fill_manual(name = category_legend, labels = category_names,  guide = "legend", values = category_colours)+
#guides(name = category_legend, fill = guide_legend(labels = category_names))+
theme(legend.position = "right", legend.key.size = unit(5,"line") )
dummy
## add a legend
dummy = ggplot(temp$data[[5]], aes(x = x, y = y, group = group, fill  = fill)) + geom_polygon() +
scale_fill_manual(name = category_legend, labels = category_names,  guide = "legend", values = category_colours)+
#guides(name = category_legend, fill = guide_legend(labels = category_names))+
theme(legend.position = "right", legend.key.size = unit(5,"line"), legend.text = element_text(size = 14))
dummy
baseCAT = plot_WG_map(cat_WG_names[rw], cat_countries[[rw]], add_marker = F, add_marker_dot = F)
# adjust fill
temp = ggplot_build(baseCAT)
temp$data[[5]]$fill = cat_df$fill[match(temp$data[[5]]$ISO3,cat_df$ISO3)]
temp_ggtable = ggplot_gtable(temp)
### add a legend
# This is where you can edit the legend size and style
dummy = ggplot(temp$data[[5]], aes(x = x, y = y, group = group, fill  = fill)) + geom_polygon() +
scale_fill_manual(name = category_legend, labels = category_names,  guide = "legend", values = category_colours)+
#guides(name = category_legend, fill = guide_legend(labels = category_names))+
theme(legend.position = "right", legend.key.size = unit(5,"line"), legend.text = element_text(size = 14))
### add a legend
# This is where you can edit the legend size and style
dummy = ggplot(temp$data[[5]], aes(x = x, y = y, group = group, fill  = fill)) + geom_polygon() +
scale_fill_manual(name = category_legend, labels = category_names,  guide = "legend", values = category_colours)+
#guides(name = category_legend, fill = guide_legend(labels = category_names))+
theme(legend.position = "right", legend.key.size = unit(5,"line"), legend.text = element_text(size = 18))
View(category_data)
strsplit(category_data$Categories, ";")
max(strsplit(category_data$Categories, ";"))
max(unlist(strsplit(category_data$Categories, ";")))
unlist(strsplit(category_data$Categories, ";"))
max(as.numeric(unlist(strsplit(category_data$Categories, ";"))))
g = ggplotGrob(dummy)$grobs
legend <- g[[which(sapply(g, function(x) x$name) == "guide-box")]]
plot(legend)
# the layout matrix for the combined plot
lay = rbind(matrix(c(1,1,1,1,1,1,2)),c(1,1,1,1,1,1,2), c(1,1,1,1,1,1,2))
# the layout matrix for the combined plot
lay = rbind(matrix(c(1,1,1,1,1,1,NA)),c(1,1,1,1,1,1,2), c(1,1,1,1,1,1,2), c(1,1,1,1,1,1,2), c(1,1,1,1,1,1,NA))
grid.arrange(grobs = list(temp_ggtable, legend),layout_matrix = lay, heights = c(rep(2,nrow(lay)-1),1))
library(gridExtra)
grid.arrange(grobs = list(temp_ggtable, legend),layout_matrix = lay, heights = c(rep(2,nrow(lay)-1),1))
temp_ggtable
plot(temp_ggtable)
grid.arrange(grobs = list(temp_ggtable, legend),layout_matrix = lay)#, heights = c(rep(2,nrow(lay)-1),1))
grid.arrange(grobs = list(ggplotGrob(temp_ggtable), legend),layout_matrix = lay)#, heights = c(rep(2,nrow(lay)-1),1))
grid.arrange(grobs = list(temp_ggtable, legend))
lay
# the layout matrix for the combined plot
lay = cbind(matrix(c(1,1,1,1,1,1,NA)),c(1,1,1,1,1,1,2), c(1,1,1,1,1,1,2), c(1,1,1,1,1,1,2), c(1,1,1,1,1,1,NA))
lay
grid.arrange(grobs = list(temp_ggtable, legend),layout_matrix = lay)#, heights = c(rep(2,nrow(lay)-1),1))
# the layout matrix for the combined plot
lay = rbind(c(1,1,1,1,1,1,NA),c(1,1,1,1,1,1,2), c(1,1,1,1,1,1,2), c(1,1,1,1,1,1,2), c(1,1,1,1,1,1,NA))
lay
grid.arrange(grobs = list(temp_ggtable, legend),layout_matrix = lay)#, heights = c(rep(2,nrow(lay)-1),1))
# the layout matrix for the combined plot
lay = rbind(c(1,1,1,1,1,1,1,1,NA),c(1,1,1,1,1,1,1,1,2), c(1,1,1,1,1,1,1,1,2), c(1,1,1,1,1,1,1,1,2), c(1,1,1,1,1,1,1,1,NA))
grid.arrange(grobs = list(temp_ggtable, legend),layout_matrix = lay)#, heights = c(rep(2,nrow(lay)-1),1))
CAT = grid.arrange(grobs = list(temp_ggtable, legend),layout_matrix = lay)#, heights = c(rep(2,nrow(lay)-1),1))
# save plot
## if filname = NULL and marker_colour != NULL then add plot markers
save_map(map,WG_names[rw], outdir)
maindir = "C:/Users/kabaldry/OneDrive - University of Tasmania/Documents/SOOS"
filename = file.path(maindir, "data", "SOOSWG_list_09022020.csv")
outdir = file.path(maindir, "output","style1")
lookupfile = file.path(maindir, "data", "country_lookup_table.txt")
# save plot
## if filname = NULL and marker_colour != NULL then add plot markers
save_map(map,WG_names[rw], outdir)
# save plot
## if filname = NULL and marker_colour != NULL then add plot markers
save_map(CAT,"test", outdir)
save_map <- function(plot, WG_name, outdir, p_width = 35, p_height = 25.8){
p_name = file.path(outdir, gsub(" ","",paste(WG_name, "_membermap_",format(Sys.Date(), "%Y"),".png", sep = "")))
ggsave(p_name, plot =plot , width = p_width, height = p_height, units = "cm",  device = "png") # asp 1.550668
print(paste(WG_name, "map has been saved as",basename(p_name), "in output directory!"))
}
# save plot
## if filname = NULL and marker_colour != NULL then add plot markers
save_map(CAT,"test", outdir)
grid.arrange(grobs = temp_ggtable, right =  legend)
# adjust the width of the legend here for longer names
CAT = grid.arrange(grobs = list(temp_ggtable, legend),layout_matrix = lay, widths = c(8,1), padding = unit(0, units = "line"))
# adjust the width of the legend here for longer names
CAT = grid.arrange(grobs = list(temp_ggtable, legend),layout_matrix = lay, widths = c(8,1), padding = unit(0.5, units = "line"))
grid.arrange(grobs = list(temp_ggtable, legend),layout_matrix = lay, widths = c(8,1)
)
# the layout matrix for the combined plot
lay = rbind(c(1,NA),c(1,2), c(1,2), c(1,2), c(1,NA))
lay
# adjust the width of the legend here for longer names
CAT = grid.arrange(grobs = list(temp_ggtable, legend),layout_matrix = lay, widths = c(8,1), padding = unit(0.5, units = "line"))
# adjust the width of the legend here for longer names
CAT = grid.arrange(grobs = list(temp_ggtable, legend),layout_matrix = lay, widths = c(6,1), heights = c() padding = unit(0.5, units = "line"))
grid.arrange(grobs = list(temp_ggtable, legend),layout_matrix = lay, widths = c(6,1)
)
grid.arrange(grobs = temp_ggtable, right = legend)
category_values = c("A", "B", "C", "D")
i = 1
gsub(i,category_values[i],category_data$Categories)
for(i in 1:length(category_values)){
category_data$Categories = gsub(i,category_values[i],category_data$Categories)
}
category_data$Categories
# Load and save example data
maindir = "C:/Users/kabaldry/OneDrive - University of Tasmania/Documents/SOOS"
filename = file.path(maindir, "file_examples", "SOOSWG_file_22022020.csv")
outdir = file.path(maindir, "output","style1")
lookupfile = file.path(maindir, "file_examples", "country_lookup_table.txt")
inst_LT =  file.path(maindir, "file_examples", "Mapping institutes.csv")
cat_table = file.path(maindir, "file_examples", "Category_example_file.csv")
### WG data
# read the file
data = read.csv(filename, header = T,  stringsAsFactors = F)
colnames(data) = gsub("ï..","",colnames(data)) # this is a bug that can occur from excel (yay excel)
example_WG_data = data
### Country lookup table
# read the lookup file
country_LT = read.csv(lookupfile, header = T, stringsAsFactors = F,strip.white = T)
example_country_data = country_LT
### WG and institution data
example_institution_data = read.csv(inst_LT, header = T, stringsAsFactors = F,strip.white = T)
colnames(example_institution_data) = gsub("ï..","",colnames(example_institution_data)) # this is a bug that can occur from excel (yay excel)
### Country category data
example_category_data = read.csv(cat_table, header = T, stringsAsFactors = F,strip.white = T)
colnames(example_category_data) = gsub("ï..","",colnames(example_category_data)) # this is a bug that can occur from excel (yay excel)
save(example_WG_data, example_country_data, example_institution_data, example_category_data, file = "C:/Users/kabaldry/OneDrive - University of Tasmania/Documents/R_packages/mapSOOSWG/data/ExampleData.rda")
category_data$Categories
gsub(category_values[i],i,category_data$Categories)
category_values[i]
devtools::install_github("KimBaldry/mapSOOSWG")
devtools::install_github("KimBaldry/mapSOOSWG")
install.packages("devtools")
library(devtools)
devtools::install_github("KimBaldry/mapSOOSWG")
library(mapSOOSWG)
plot_WG_map(WG_name = "Test", WG_countries = c("GBR", "USA", "AUS"))
plot_WG_map(WG_name = "Test", WG_countries = c("GBR", "USA", "AUS"))
plot_WG_map(WG_name = "Test", WG_countries = c("GBR", "USA", "AUS"))
View(example_WG_data)
